# Generated by Django 2.1.3 on 2019-03-04 20:06

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import macaddress.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='Client Name')),
                ('address', models.CharField(blank=True, default='', max_length=120, null=True, verbose_name='Client Address')),
                ('phone', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='Phone Number')),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='Additional information')),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domainnameshort', models.CharField(max_length=30, verbose_name='Short domain name:')),
                ('domainnamelong', models.CharField(max_length=50, verbose_name='Long domain name (.local):')),
                ('admin', models.CharField(default='administrator', max_length=15, verbose_name='Domain admin username:')),
                ('dnsip', models.GenericIPAddressField(default='192.168.0.10', protocol='IPv4', verbose_name='Domain dns IP: ')),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='Description: ')),
                ('company', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, related_name='domain', to='models.Client', verbose_name='Company: ')),
            ],
        ),
        migrations.CreateModel(
            name='NetworkEquipment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_type', models.CharField(choices=[('N', 'No connection'), ('E', 'Ethernet'), ('W', 'WiFi')], default='N', max_length=1, verbose_name='Netowrk connection type')),
                ('ip_type', models.CharField(choices=[('N', 'No connection'), ('D', 'DHCP address'), ('L', 'Static address, local'), ('R', 'Static address, router')], default='N', max_length=1, verbose_name='IP addressing type')),
                ('ip_address', models.GenericIPAddressField(blank=True, default='', null=True, verbose_name='IP Address')),
                ('mac_address', macaddress.fields.MACAddressField(blank=True, integer=False, max_length=17, null=True)),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='Additional information')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.CharField(max_length=30, verbose_name='First Name')),
                ('lastname', models.CharField(max_length=30, verbose_name='Last Name')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('phone', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='Phone Number')),
                ('annoyance', models.PositiveSmallIntegerField(default='0', validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)], verbose_name='Annoyance level')),
                ('description', models.TextField(blank=True, default='', null=True, verbose_name='Additional information')),
                ('employedby', models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='employees', to='models.Client', verbose_name='Employed by')),
            ],
        ),
        migrations.CreateModel(
            name='Computer',
            fields=[
                ('networkequipment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models.NetworkEquipment')),
                ('computername', models.CharField(max_length=30, verbose_name='Computer Name')),
                ('operatingsystem', models.CharField(choices=[('W10', 'Windows 10'), ('W8', 'Windows 8'), ('W7', 'Windows 7'), ('WS6', 'Windows Server 2019'), ('WS6', 'Windows Server 2016'), ('WS2', 'Windows Server 2012'), ('WS08', 'Windows Server 2008'), ('WS03', 'Windows Server 2003'), ('WSO', 'Windows Other'), ('MJ', 'MacOS Majovang'), ('MHS', 'MacOS High Siera'), ('MHS', 'MacOS Siera'), ('MHS', 'MacOS Other'), ('WXP', 'Windows XP'), ('WO', 'Windows Other'), ('MO', 'MacOS Other'), ('O', 'Other')], default='W10', max_length=4)),
                ('manufacturer', models.CharField(choices=[('D', 'DELL'), ('H', 'HP'), ('L', 'Lenovo'), ('G', 'Apple'), ('A', 'Asus'), ('S', 'Sony'), ('C', 'Acer'), ('O', 'Other')], default='D', max_length=1)),
                ('model', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('compmonth', models.IntegerField(blank=True, default=3, null=True, validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(1)], verbose_name='Recieved Month (enter a number)')),
                ('compyear', models.IntegerField(blank=True, default=2019, null=True, validators=[django.core.validators.MaxValueValidator(2030), django.core.validators.MinValueValidator(2000)], verbose_name='Recieved Year (enter a number)')),
                ('serialnumber', models.CharField(blank=True, default='', max_length=25, null=True)),
                ('user', models.ManyToManyField(blank=True, related_name='computer', to='models.Person')),
            ],
            bases=('models.networkequipment',),
        ),
        migrations.CreateModel(
            name='OtherNetworkEquipment',
            fields=[
                ('networkequipment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models.NetworkEquipment')),
                ('equipmenttype', models.CharField(max_length=30, verbose_name='Equipment Type')),
                ('manufacturer', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='Manufacturer')),
                ('model', models.CharField(blank=True, default='', max_length=20, null=True, verbose_name='Model')),
                ('serialnumber', models.CharField(blank=True, default='', max_length=25, null=True, verbose_name='Serial number')),
            ],
            bases=('models.networkequipment',),
        ),
        migrations.CreateModel(
            name='Printer',
            fields=[
                ('networkequipment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models.NetworkEquipment')),
                ('printername', models.CharField(max_length=30, verbose_name='Printer Name')),
                ('manufacturer', models.CharField(choices=[('H', 'HP'), ('B', 'Brothers'), ('C', 'Canon'), ('X', 'Xerox'), ('D', 'Dymo'), ('O', 'Other')], default='H', max_length=1)),
                ('printertype', models.CharField(choices=[('BL', 'Black and white, Laser'), ('CL', 'Color, Laser'), ('BI', 'Black and white, Ink'), ('CI', 'Color, Ink'), ('L', 'Label'), ('O', 'Other')], default='BL', max_length=2)),
                ('model', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('prmonth', models.IntegerField(blank=True, default=3, null=True, validators=[django.core.validators.MaxValueValidator(12), django.core.validators.MinValueValidator(1)], verbose_name='Recieved Month (enter a number)')),
                ('pryear', models.IntegerField(blank=True, default=2019, null=True, validators=[django.core.validators.MaxValueValidator(2030), django.core.validators.MinValueValidator(2000)], verbose_name='Recieved Year (enter a number)')),
                ('serialnumber', models.CharField(blank=True, default='', max_length=25, null=True)),
            ],
            bases=('models.networkequipment',),
        ),
        migrations.CreateModel(
            name='Router',
            fields=[
                ('networkequipment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='models.NetworkEquipment')),
                ('manufacturer', models.CharField(choices=[('S', 'Sonicwall'), ('N', 'Netgear'), ('A', 'Asus'), ('L', 'Linksys'), ('C', 'Cisco'), ('U', 'Ubiquity'), ('T', 'TP Link'), ('O', 'Other')], default='S', max_length=1)),
                ('model', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('serialnumber', models.CharField(blank=True, default='', max_length=25, null=True)),
                ('externalip', models.GenericIPAddressField(blank=True, default='', null=True, protocol='IPv4', verbose_name='External IP address')),
                ('settingslink', models.CharField(blank=True, default='', max_length=100, null=True, verbose_name='Link to settings')),
                ('firmwareversion', models.CharField(blank=True, default='', max_length=30, null=True, verbose_name='Firware version')),
            ],
            bases=('models.networkequipment',),
        ),
        migrations.AddField(
            model_name='networkequipment',
            name='company',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='models.Client'),
        ),
        migrations.AddField(
            model_name='domain',
            name='server',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='domain', to='models.Computer', verbose_name='Domain server: '),
        ),
    ]
